# --- Conditional Processing ---
# Only execute following steps if Google Calendar data has changed.
# (Skip when HTTP status is 304)

name: JP-Holiday Calendar generate

on:
  push:
    branches: [ "master" ]               # Trigger on pushes to master
  schedule:
    - cron: '0 0 * * *'                  # Run every day at 00:00 (UTC)
  workflow_dispatch:                     # Allow manual triggering

# Prevent multiple concurrent deployments from overlapping
concurrency:
  group: "pages"
  cancel-in-progress: true

permissions:
  contents: write                        # Allow pushing changes (e.g., .exec_timestamp updates)

jobs:
  # ----------------------------
  # Build Job
  # ----------------------------

  build:
    runs-on: ubuntu-latest
    outputs:
      # Export main.php result status for deploy job
      status: ${{ steps.main.outputs.status }}

    steps:
      # ----------------------------
      # Setup and Dependency Management
      # ----------------------------

      # Check out the repository code
      - uses: actions/checkout@v4

      - name: Validate composer.json and composer.lock
        run: composer validate --strict
        continue-on-error: true            # Continue even if validation warnings occur

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Make directory
        run: |
          mkdir -p ./dist                  # Output directory for generated files
          mkdir -p ./.cache                # Cache directory for Google Calendar data

      # ----------------------------
      # Google Calendar Caching
      # ----------------------------

      # Restore cached calendar data from previous builds.
      # The key uses run_id for uniqueness on save but only restore-keys for lookup.
      # This avoids creating redundant “jp-holiday-gcal-cache-Linux” entries.
      - name: Restore calendar cache
        uses: actions/cache@v4
        with:
          path: .cache
          key: jp-holiday-gcal-cache-${{ runner.os }}-${{ github.run_id }}
          restore-keys: |
            jp-holiday-gcal-cache-${{ runner.os }}-
            jp-holiday-gcal-cache-

      # ----------------------------
      # Main Script Execution
      # ----------------------------

      - name: Run main
        id: main
        run: |
          php -d detect_unicode=0 ./main.php > result.log
          STATUS=$(grep -o '"status":[[:space:]]*[0-9]\+' result.log | head -1 | grep -o '[0-9]\+')
          echo "status=$STATUS" >> $GITHUB_OUTPUT   # Pass status to later steps
          echo "main.php finished with status [$STATUS]"
          rm -f result.log

      # ----------------------------
      # Conditional Processing (Only when Calendar Updated)
      # ----------------------------

      # Save updated cache only when calendar data changed.
      # Keeps cache fresh without redundant data writes.
      - name: Save calendar cache
        if: steps.main.outputs.status != '304'
        uses: actions/cache@v4
        with:
          path: .cache
          key: jp-holiday-gcal-cache-${{ runner.os }}-${{ github.run_id }}

      # Ensure README.md exists before converting
      - name: Ensure README.md exists
        if: steps.main.outputs.status != '304'
        run: test -f README.md

      # Convert README.md to index.html for GitHub Pages
      # Using official Pandoc Docker image for reproducibility
      # Adds SEO-friendly metadata, OGP tags, and Twitter Card integration
      - name: Generate index.html by Pandoc
        if: steps.main.outputs.status != '304'
        uses: docker://pandoc/core
        with:
          args: >
            -f markdown
            -t html5
            README.md
            -s
            --embed-resources
            -c github-markdown-dark.css
            -o dist/index.html
            --metadata title="Japanese Holiday | Japan’s Official Holiday JSON/CSV Feed"
            --metadata description="Automatically updated dataset of Japan’s national and festival holidays based on Google Calendar. Available daily in JSON and CSV formats (ISO 8601 & JST timestamps)."
            --metadata author="ennacx"
            --metadata lang="en"
            --metadata keywords="Japan holidays, Japanese calendar, national holidays, JSON, CSV, GitHub Pages, Google Calendar, JST, ISO8601"
            --metadata og:title="Japanese Holiday | Japan’s Official Holiday Data"
            --metadata og:description="Daily auto-updated JSON/CSV datasets for Japan’s holidays, generated from Google Calendar (JST/ISO8601)."
            --metadata og:type="website"
            --metadata og:url="https://ennacx.github.io/jp-holiday/"
            --metadata og:image="https://ennacx.github.io/jp-holiday/ogp.png"
            --metadata twitter:card="summary_large_image"
            --metadata twitter:title="Japanese Holiday"
            --metadata twitter:description="Auto-updated JSON/CSV datasets for Japan’s official holidays."
            --metadata twitter:image="https://ennacx.github.io/jp-holiday/ogp.png"
            --include-before-body=meta.html

      # Copy resources
      - name: Copy resources
        if: steps.main.outputs.status != '304'
        run: |
          cp ./googleb95e7dd5d4aa5997.html ./dist/
          cp ./ogp.png ./dist/

      # Commit timestamp and push changes only if calendar was updated
      # Note: .exec_timestamp is always updated intentionally for tracking
      - name: git Commit & Push
        if: steps.main.outputs.status != '304'
        run: |
          date -u +%FT%TZ > .exec_timestamp
          git config core.filemode false
            if ! git diff --exit-code --quiet
            then
              git add --update
              git config user.name "github-actions[bot]"
              git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
              git commit -m "[Update] Auto-Commit by github-actions $(date -u +%F)" || echo "No changes to commit"
              git push
            fi

      # Upload artifacts for GitHub Pages deployment
      - name: Upload Pages artifact
        if: steps.main.outputs.status != '304'
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'

  # ----------------------------
  # Deploy Job (only if updated)
  # ----------------------------

  deploy:
    runs-on: ubuntu-latest
    needs: build
    # Take over the build job's output status and skip when 304 (no data change)
    if: ${{ needs.build.outputs.status != '304' }}
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
